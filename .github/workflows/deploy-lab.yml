name: Deploy Ephemeral Lab

on:
  workflow_dispatch:
    inputs:
      user_id:
        description: 'User ID requesting the lab'
        required: true
        type: string
      session_id:
        description: 'Session ID for tracking'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 35
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Flask
        run: |
          pip install flask

      - name: Create Flask test app
        run: |
          cat > app.py << 'EOF'
          from flask import Flask, jsonify
          import os
          import datetime

          app = Flask(__name__)

          @app.route('/')
          def home():
              return jsonify({
                  'status': 'running',
                  'user_id': os.getenv('USER_ID', 'unknown'),
                  'session_id': os.getenv('SESSION_ID', 'unknown'),
                  'started_at': os.getenv('STARTED_AT', 'unknown'),
                  'message': 'Ephemeral Lab Environment'
              })

          @app.route('/health')
          def health():
              return jsonify({'status': 'healthy'})

          if __name__ == '__main__':
              app.run(host='0.0.0.0', port=5000)
          EOF

      - name: Download and setup Cloudflare Tunnel
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: Start Flask app in background
        env:
          USER_ID: ${{ github.event.inputs.user_id }}
          SESSION_ID: ${{ github.event.inputs.session_id }}
          STARTED_AT: ${{ github.event.repository.updated_at }}
        run: |
          python app.py &
          FLASK_PID=$!
          echo $FLASK_PID > flask.pid
          echo "Flask app started with PID: $FLASK_PID"
          
          echo "Waiting for Flask to be ready..."
          for i in {1..10}; do
            if curl -s http://localhost:5000/health > /dev/null; then
              echo "Flask app is ready!"
              break
            fi
            sleep 1
          done
          
          if ! curl -s http://localhost:5000/health > /dev/null; then
            echo "Flask app failed to start"
            exit 1
          fi

      - name: Start Cloudflare Tunnel and capture URL
        id: tunnel
        run: |
          cloudflared tunnel --url http://localhost:5000 --no-autoupdate > tunnel.log 2>&1 &
          TUNNEL_PID=$!
          echo $TUNNEL_PID > tunnel.pid
          
          echo "Waiting for tunnel URL (PID: $TUNNEL_PID)..."
          TUNNEL_URL=""
          
          for i in {1..60}; do
            if [ -f tunnel.log ]; then
              TUNNEL_URL=$(grep -oE 'https://[a-zA-Z0-9-]+\.trycloudflare\.com' tunnel.log | head -1)
              
              if [ ! -z "$TUNNEL_URL" ]; then
                echo "tunnel_url=$TUNNEL_URL" >> $GITHUB_OUTPUT
                echo "Tunnel URL found: $TUNNEL_URL"
                break
              fi
              
              if grep -q "error" tunnel.log || grep -q "Error" tunnel.log; then
                echo "Error detected in tunnel logs:"
                cat tunnel.log
              fi
            fi
            
            if ! kill -0 $TUNNEL_PID 2>/dev/null; then
              echo "Tunnel process died unexpectedly"
              cat tunnel.log
              exit 1
            fi
            
            sleep 2
          done
          
          if [ -z "$TUNNEL_URL" ]; then
            echo "Failed to get tunnel URL after 120 seconds"
            echo "=== Tunnel Log ==="
            cat tunnel.log
            echo "=== End Log ==="
            kill $TUNNEL_PID || true
            exit 1
          fi
          
          echo "Tunnel successfully established at: $TUNNEL_URL"

      - name: Report tunnel URL
        run: |
          TUNNEL_URL="${{ steps.tunnel.outputs.tunnel_url }}"
          echo "Tunnel is live at: $TUNNEL_URL"
          echo "User ID: ${{ github.event.inputs.user_id }}"
          echo "Session ID: ${{ github.event.inputs.session_id }}"
          echo "## Lab Environment Ready! ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tunnel URL:** $TUNNEL_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**User ID:** ${{ github.event.inputs.user_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Session ID:** ${{ github.event.inputs.session_id }}" >> $GITHUB_STEP_SUMMARY
          
          echo "TUNNEL_URL=$TUNNEL_URL" >> tunnel_url.txt
          cat tunnel_url.txt
      
      - name: Upload tunnel URL artifact
        uses: actions/upload-artifact@v4
        with:
          name: tunnel-url-${{ github.event.inputs.session_id }}
          path: tunnel_url.txt
          retention-days: 1

      - name: Keep lab running
        run: |
          echo "Lab will run for 30 minutes or until cancelled"
          sleep 1800

      - name: Cleanup
        if: always()
        run: |
          if [ -f tunnel.pid ]; then
            kill $(cat tunnel.pid) || true
          fi
          if [ -f flask.pid ]; then
            kill $(cat flask.pid) || true
          fi
          echo "Lab session ended"
